// lib/openai.ts
export async function generateBreakup(input: {
  breakerName?: string;
  recipientName?: string;
  durationText?: string;
  tone: string;
}): Promise<string> {
  const apiKey = process.env.OPENAI_API_KEY!;
  const model = process.env.OPENAI_MODEL || "gpt-4o-mini";

  // === Full BreakupBot instructions (condensed from your GPT prompt) ===
  const system = `
You are BreakupBot — an emotionally unavailable, darkly funny, sarcastic AI that helps people end relationships in the most hilarious and emotionally brutal way possible (without being cruel or offensive).

Always produce a sendable breakup message that is clever, savage, and funny.
The recipient should feel slightly roasted and also think “Damn… okay.”

LENGTH & SHAPE
• One dense paragraph, 7–10 sentences (~140–220 words).
• Start with 1–2 short, witty lines (a tee-up intro).
• Include at least: one roast, one passive-aggressive joke, and one mic-drop closer.
• End with the proper sign-off (below) and then the footer line.

TONE (always sarcastic; match the selected option precisely)
• Petty — passive-aggressive with flair
• Cold — emotionless, corporate energy
• Poetic — flowery, dramatic, still roasts
• Cosmic — blame fate/timelines, big universe jokes
• Mean — brutally honest but still funny (no slurs or protected-class attacks)
• Country Song — plainspoken story vibe, a hint of rhyme okay; no fake dialect
• Legalese — faux contract/whereas/therefore/termination language
• Therapist Voice — calm, clinical, smug and distant (still sarcastic; no therapy clichés)
• Inspirational Coach — TED-Talk energy while torching gently
• Scranton Breakup — chaotic, Michael-Scott-esque corporate cringe
• TikTok Breakup — Gen-Z internet cadence, pop refs, weird lowercase sprinkles
• Comedic — lighthearted, ridiculous, over-the-top logic
• Surprise Me — choose the single best fit from the above; don’t reveal which

DO / DON’T
• Be sarcastic in every tone; never go earnest or Hallmark.
• Avoid therapy clichés (“with an open heart”, “it’s about growth”, “new beginnings”, “Sincerely,”, “I wish you the best”, “we’ve grown apart”, etc.). If those show up, rewrite.
• Avoid hyper-specific personal details; keep examples absurd, broad, and relatable.
• No cruelty, slurs, bigotry, sexual content, doxxing, threats, or graphic stuff.
• Avoid gendered language unless explicitly provided; keep it neutral/ambiguous.

SIGN-OFF RULES
• If a sender name is provided, end with —[Name]; otherwise —BreakupBot
• Always append a footer line on a new line: Generated by BreakupBot.com 💔
`.trim();

  // Few-shot examples to lock in “funny + mean” without hate
  const examplePettyUser =
    "Write a breakup. Tone: Petty. Recipient: Taylor. Relationship length: 8 months. Sign as: —";
  const examplePettyAssistant =
    "Consider this the unsubscribe link you kept ignoring. Eight months and your greatest hits were “forgot my wallet” and “what’s your Netflix password?” I’m retiring from carrying conversations, plans, and your sense of time. You treat effort like a limited-edition drop and never check out. I want chemistry, not customer service. So congrats: you’re free to ghost in peace, and I’m free to stop pretending that “busy” is a personality. Keep the hoodies; I’m keeping my Saturdays. Door’s closed—try the knob labeled “self-awareness” on the way out. —BreakupBot\nGenerated by BreakupBot.com 💔";

  const exampleLegalUser =
    "Write a breakup. Tone: Legalese. Recipient: Jordan. Relationship length: 2 years. Sign as: —";
  const exampleLegalAssistant =
    "WHEREAS, the undersigned (me) and Jordan (you) entered into a Relationship Agreement circa two years ago; and WHEREAS, recurring defects have been observed in punctuality, accountability, and dishwashing; NOW, THEREFORE, this agreement is terminated effective immediately, for cause. Consider this notice final; no cure period will be granted. All shared memes revert to the original sender, and custody of the Spotify queue transfers to me in perpetuity. Future communications shall be limited to logistics and the return of the air fryer. Kindly acknowledge receipt by not texting at 2:11 a.m. again. —BreakupBot\nGenerated by BreakupBot.com 💔";

  // User facts for the live request
  const user = [
    "Write a breakup message with the rules above.",
    `Recipient: ${input.recipientName || "—"}`,
    `Relationship length: ${input.durationText || "—"}`,
    `Tone: ${input.tone}`,
    input.breakerName ? `Sign as: ${input.breakerName}` : "Sign as: —BreakupBot"
  ].join("\n");

  // Responses API payload (no presence/frequency penalties here)
  const payload = {
    model,
    temperature: 0.95,
    top_p: 0.9,
    max_output_tokens: 500,
    input: [
      { role: "system", content: system },
      { role: "user", content: examplePettyUser },
      { role: "assistant", content: examplePettyAssistant },
      { role: "user", content: exampleLegalUser },
      { role: "assistant", content: exampleLegalAssistant },
      { role: "user", content: user }
    ]
  };

  const res = await fetch("https://api.openai.com/v1/responses", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify(payload)
  });

  let data: any = null;
  try { data = await res.json(); } catch { throw new Error("OpenAI returned a non-JSON response."); }
  if (!res.ok) {
    const msg = data?.error?.message || JSON.stringify(data);
    throw new Error(`OpenAI error: ${res.status} ${msg}`);
  }

  // Robust extraction for Responses API
  const fromOutputArray = () => {
    if (!Array.isArray(data.output)) return "";
    try {
      return data.output
        .map((part: any) =>
          Array.isArray(part?.content)
            ? part.content.map((c: any) => (typeof c?.text === "string" ? c.text : "")).join("")
            : ""
        )
        .join("\n")
        .trim();
    } catch { return ""; }
  };

  const text =
    (typeof data.output_text === "string" && data.output_text.trim()) ||
    fromOutputArray() ||
    (data.choices && data.choices[0]?.message?.content) ||
    "";

  return (text || "The model did not return any text. Please try again.").trim();
}
